apply plugin: 'com.android.application'

def getMyStoreFile() {
    if ("true".equals(IS_JENKINS)){
        return file("../doc/keystore.jks")
    }else{
        return file("../doc/keystore.jks")
    }
}

android {
    compileSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION as int
    defaultConfig {
        applicationId project.APPLICATION_ID
        minSdkVersion project.ANDROID_BUILD_MIN_SDK_VERSION
        targetSdkVersion project.ANDROID_BUILD_TARGET_SDK_VERSION  as int
        versionCode project.VRESION_CODE as int
        versionName project.VERSION_NAME
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
        release {
            keyAlias 'aaaaa'
            keyPassword '123456'
            storeFile getMyStoreFile()
            storePassword '123456'
        }
    }
    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            shrinkResources true
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            //新名字
            def newName
            //输出文件夹
            def outDirectory
            outputFileName = "1hu_${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
            //是否为Jenkins打包，输出路径不同
//            if ("true".equals((IS_JENKINS))) {
//                //BUILD_PATH为服务器输出路径
//                outDirectory = BUILD_PATH
//                newName = "LottieDemo" + "-" + defaultConfig.versionName + "-" + BUILD_TYPE
//            } else {
//                outDirectory = output.outputFile.getParent()
//                newName = "LottieDemo" + "-" + defaultConfig.versionName + "-" + BUILD_TYPE
//            }
//            output.outputFile = new File(outDirectory, newName)
        }
    }
    flavorDimensions("channel")
    productFlavors {
        yingyongbao { dimension "channel" }
    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation 'com.android.support:design:26.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
    compile 'com.airbnb.android:lottie:1.0.1'
    compile "io.reactivex.rxjava2:rxjava:2.1.12"
    compile "io.reactivex.rxjava2:rxandroid:2.0.2"
}
